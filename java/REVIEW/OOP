(5/17~ )
//자바에서 함수는 method//

//절차지향 프로그래밍(procedural Programming) (c언어 등등)
//순서대로 잘 프로그래밍해서 결과를 내자 -> 변수 하나 덜 쓰려고 노력하고, 코드가 길지 않도록 최대한 효율적으로 짜려했음(옛날 하드웨어 성능 이슈)
//조건문 반복문 등등
//장점 : 처리 속도,  실행 속도가 빠르다

//객체지향 프로그래밍(Object-Oriented Programming)
//코드 짜는것을 실생활과 비슷하게 구현해보자. (우리가 살고 있는 현실을 모델링하자)
//코드 보기가 더 편하고, 유지보수에 용이한 형태로 구현해보자!
//장점 : 유지보수에 용이한 구조, 코드의 재사용성, 대규모 프로젝트에 적합

//객체(Object) : 예를 들면 실생활에 존재하는 모든 것, 자바에서는 클래스에 의해 정의되고 설계된 대상
//(class에서 만들어진 객체는 인스턴스(instance)라고도 부름) )
// 특정 대상이 가지는 속성, 동작을 정의하는 틀 (쿠키 찍어내는 틀 비슷함)
//예) [에어컨] = (속성 - 온도, 바람, 풍향) (동작 - 켜다, 끄다, 풍향을 바꾼다)

//Garbage Collector
//(https://github.com/noncrit/soldesk/blob/main/java/2024_05/2024_05_17/OOP1/OMain5.java)
//stack : push&pop, 프로그램이 종료되면 스택에 있는 할당된 자원은 회수됨
//Heap	: 컴퓨터가 적당하다고 판단한 위치에 변수의 공간 할당 / 자동 정리 X ->지금은 Garbage collection이 알아서 자원 정리함
//예전 C,C++은 가비지 컬렉터 없어서 설계 단계에서 메모리 회수까지 신경써야했음
//Java는 JVM에 탑재되어있는 Garbage Collector가 메모리 관리를 알아서 해줌 -> 개발자가 신경써야할게 하나 줄어듬
//GC 작동시점 : 할당되어있던 메모리 주소값에 접근할 방법이 없어지면 GC가 작동함
//단점 : GC가 실제로 작동하는 것을 확인할 수 없음
//System.gc() 이걸로 수동으로 정리할 수는 있지만, System.gc();를 호출하는 것 자체가 부하가 큰 작업임(메모리 영역을 high level에서 직접 호출하는 작업임...)
